// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"

}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL") 
  directUrl = env("DIRECT_DATABASE_URL") // uses a direct connection
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  salt          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  buildingSessions BuildSession[]
  components    Component[]
  messages Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Component {
  id          Int      @id @default(autoincrement())
  name        String
  version     String
  description String
  framework   String
  components  String?
  icons       String?
  code        String?
  query       String?
  logs        String?
  buildSessionId String @unique
  buildSession BuildSession @relation(fields: [buildSessionId], references: [id])
  user     User?   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String?
}

model Fail {
  id        Int     @id @default(autoincrement())
  query     String
  timestamp Int
  logs      String?
}

model BuildSession{
  id  String   @id @default(cuid()) @unique
  // title String?
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  messages Message[]
  component Component?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id       String     @id 
  content  String
  role     Role
  timestamp  DateTime @default(now())
  buildingSessionId String
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  buildingSession BuildSession @relation(fields: [buildingSessionId], references: [id])
}

enum Role {
  USER
  ASSISTANT
}

// enum Status {
//   DRAFT
//   COMPLETED
// }